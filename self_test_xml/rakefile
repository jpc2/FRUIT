require 'rubygems'
require 'fruit_processor'
require 'rake/clean'
include Rake::DSL if defined?(Rake::DSL)
load "../rake_base.rb"

require 'rexml/document'

$build_dir = ""  #If not set, build will be done in ../build/
$source_dirs = ["../src", "./"]  # "../src" is for fruit.f90 and fruit_util.f90
$goal = "fruit_driver_fxx.exe"

# Add this line at the beginning if there are generated code involved
fp = FruitProcessor.new
#fp.shuffle = true          #if true order of methods will be random
fp.pre_process              #It generates fruit_*_gen.f90


#--- Either load it
$main = "fruit_driver_gen.f90"
load "../rake_estimate.rb"  #Load this after fruit_*_gen.f90 generated.
load '../rake_base_deps.rb' #It uses SRC and OBJ updated by rake_estimate.rb


task :default => [:test]

task :test => $goal do
  File.open("result.xml", mode = "w"){|f|
    f.write "dummy content\n"
  }
  sh "./#{$goal}"

  ## length_test.f90 stops without returning to fruit_basket.
  ## In that case, result.xml should report a failure.

  if (! File.exist?("result.xml"))
    raise "File result.xml absent."
  end

  doc = REXML::Document.new(open("result.xml"))
  elem_needed = 'testsuites/testsuite/testcase/failure'
  begin
    puts doc.elements[ elem_needed ].text
  rescue 
    raise elem_needed + " absent."
  else
    puts "FRUIT successfully generated xml with a failure"
  end
end

task :coverage => $for_coverage.clone.push(:test) do
  if $gcov
    sh "gcov " + $for_coverage.join(" ")
  end
	if $prof_genx
	  sh "profmerge"
	end
end


task :valgrind => $goal do
  sh "valgrind --leak-check=full ./#{$goal}"
end

CLEAN.include($goal)

