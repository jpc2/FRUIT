require 'rubygems'
require 'fruit_processor'
require 'rake/clean'
include Rake::DSL if defined?(Rake::DSL)
load "../rake_base.rb"


$build_dir = ""  #If not set, build will be done in ../build/
$source_dirs = ["../src/", "./"] # "../src/" is for fruit.f90 and fruit_util.f90
$goal = "fruit_driver_selective"
$main = "fruit_driver_gen.f90"

# Add this line at the beginning if there are generated code involved
fp = FruitProcessor.new
# fp.shuffle = true         #if true order of methods will be random
fp.process_only = FileList["mydict_test.f90"] #only files here are processed.
fp.pre_process              #It generates fruit_*_gen.f90
load "../rake_estimate.rb"  #Load this after fruit_*_gen.f90 generated.
load '../rake_base_deps.rb' #It uses SRC and OBJ updated by rake_estimate.rb

file 'fruit_basket_gen.' + $ext_obj => ['rakefile']

task :default => [:dummy_main, :test]

task :test => $goal do
  sh "./#{$goal}"
  delete_obj
end

task :coverage => $for_coverage.clone.push(:test) do
  if $gcov
    sh "gcov " + $for_coverage.join(" ")
  end
  if $prof_genx
    sh "profmerge"
    sh "codecov"
  end
end

task :valgrind => $goal do
  sh "valgrind --leak-check=full ./#{$goal}"
  delete_obj
end

def delete_obj
  ["o", "obj"].each{|ext|
    name = "fruit_basket_gen." + ext
    File.delete(name)   if File.exist?(name )
  }
end


task :dummy_main do
  if $compiler != "ftn95"
    sh "#{$compiler} constant.f90 mydict.f90 dummy_main.f90 #{$option_exe} dummy_main"
    sh "./dummy_main"
  else
    sh "#{$compiler} constant.f90"
		sh "#{$compiler} mydict.f90"
		sh "#{$compiler} dummy_main.f90"
		sh "#{$linker} constant.obj mydict.obj dummy_main.obj #{$option_exe}dummy_main"
  end
end

CLEAN.include($goal)
CLEAN.include("dummy_main")
CLEAN.include("*/*.gcno")

