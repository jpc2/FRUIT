
# Copyright (c) 2005-2010, 2012-2013, Andrew Hang Chen and contributors,
# All rights reserved.
# Licensed under the 3-clause BSD license.

require 'rake/clean'
require 'rubygems'
require 'fruit_processor'

include Rake::DSL if defined?(Rake::DSL)

load 'rake_base.rb'
include RakeBase

load 'rake_base_deps.rb'
include RakeBaseDeps

$base_dir=Dir.pwd
$build_dir = "#{$base_dir}/build"

# :anchor_root must be prior to any fortran sample
task :default => [
  :clobber, :sample,

  :ruby_test, :rake_base_deps_test, :rake_estimate_test,

  :in_3_minutes,
  :sample,
  :sample_build_dir,
  :sample_selective,
  :sample_selective_main,
  :sample_multi_dir,
  :sample_external_sub, 
  :sample_external_func, 
  :sample_circular_dep, 
  :sample_exit_at_fail,
  :coverage,
  :self_test_xml
]

if RUBY_PLATFORM =~ /linux/i
  task :default => [
    :sample_using_make
  ]
end

# :sample_single_dir is not included
#    because fortran compiler must recognize .f95 extension.
# :test is not included because :self_test covers tests done in :test.

if $mpiexec_exist
    task :default => [ :self_test_mpi, :sample_mpi ]
end

if ENV['DISPLAY']
  begin
    require 'tk'
    task :default => [ :gui_fruit_test ]
  rescue LoadError
    puts "failed to require 'tk'"
  end
end

task :default => [ :self_test ]



CLEAN.include(FileList[
  '**/*.o', '**/*.obj', '**/*.mod', '**/*.a', '**/*_gen.f90', '**/*fruit_driver',
  '**/result*.xml',
  '**/fruit_driver_fxx.exe',
  '**/fruit_driver.exe',
  '**/rakefile_gui_tmp',
  '**/rakefile_gui_tester',
  '**/rakefile_gui_src',
  '**/fruit_driver_gui.exe',
  '**/fruit_driver_3min.exe',
  '**/fruit_driver_3min',
  'sample_selective/fruit_driver_selective',
  'sample_selective/dummy_main',
  'sample_selective/dummy_main.exe',
  'sample_build_dir/*/*.exe',
  'self_test/fruit_self_test_driver',
  'self_test/override_stdout.txt',
  'fruit_processor_gem/pkg/fruit_processor-*/',
  '**/*.gcda', '**/*.gcno', '**/*.gcov',
  '**/*.dyn',
  "in_3_minutes/fruit.f90",
  "in_3_minutes/fruit_util.f90",
  "sample/test/calculator_fruit_driver.exe",
  "self_test_mpi/mpi_machine_file",
  "sample_mpi/mpi_machine_file",
  "sample_external_sub/*.exe",
  "sample_external_func/*.exe",
  "sample_circular_dep/*.exe",
  "**/stdout",
  "**/fruit_basket_gen.f90",
])



CLOBBER.include(FileList['src/fruit.f90'])
CLOBBER.include($build_dir)
CLOBBER.include("ROOT_ANCHOR")

desc "Complie src/fruit*.f90 and build build/libfruit.a"
task :compile => [:anchor_root, :fruit_f90] do
  if $ar_ok
    Dir.chdir("src") do
      sh 'rake'
    end
  end
end

desc "(Obsolete) Test of fruit.f90 and fruit_util.f90."
task :test => [:anchor_root, :fruit_f90, :compile] do
  Dir.chdir("test") do
    sh 'rake'
  end
  driver_programs = FileList["#{$build_dir}/fruit_driver"]
  driver_programs.each do |driver|
    sh "\"#{driver}\""
  end
end

desc "Update fruit.f90"
task   :fruit_f90 do
  puts "fruit_f90"
  Dir.chdir("src") do
    sh 'rake fruit.f90'
  end
end

desc "Self test of fruit.f90 on xml output"
task :self_test_xml => [:anchor_root, :fruit_f90] do
  puts      "self_test_xml"
  Dir.chdir("self_test_xml") do
    begin
      sh 'rake'
    rescue
      raise "Test in self_test_xml failed."
    end
  end
end

desc "Self test of fruit.f90 and fruit_util.f90."
task :self_test => [:anchor_root, :fruit_f90] do
  puts      "self_test"
  Dir.chdir("self_test") do
    sh 'rake coverage'
  end
end

desc "Using valgrind do Self test of fruit.f90 and fruit_util.f90."
task :self_test_valgrind => [:anchor_root, :fruit_f90] do
  puts      "self_test_valgrind"
  Dir.chdir("self_test") do
    sh 'rake valgrind'
  end
end

desc "Test of fruit_processor.rb."
task   :ruby_test do
  puts "ruby_test"
  Dir.chdir("fruit_processor_gem") do
    sh 'rake test'
  end
end

desc "Test of rake_base_deps.rb"
task   :rake_base_deps_test do
  puts "rake_base_deps_test"
  Dir.chdir("ruby_test") do
    sh 'ruby rake_base_deps_test.rb'
  end
end

desc "Test of rake_estimate.rb"
task   :rake_estimate_test do
  puts "rake_estimate_test"
  Dir.chdir("ruby_test") do
    sh 'ruby rake_estimate_test.rb'
    sh 'ruby rake_estimate_ext_test.rb'
  end
end

desc "Test of gui_fruit.rb"
task   :gui_fruit_test do
  puts "gui_fruit_test"
  Dir.chdir("ruby_test") do
    sh 'ruby gui_fruit_test.rb'
  end
end


desc "Compile a sample of multi-directry test."
task   :sample => [:anchor_root, :fruit_f90, :compile] do
  puts "sample"
  Dir.chdir("sample") do
    sh 'rake'
  end
end

desc "Compile a sample of manually written test."
task   :in_3_minutes => [:anchor_root, :fruit_f90] do
  puts "in_3_minutes"
  Dir.chdir("in_3_minutes") do
    sh 'rake'
  end
end

desc "Build using not rake but make"
task     :sample_using_make => [:anchor_root, :fruit_f90] do
  puts   "sample_using_make"
  Dir.chdir("sample_using_make") do
    sh 'make'
  end
end


desc "Compile a sample of single-directry test."
task   :sample_single_dir => [:anchor_root, :fruit_f90] do
  puts "sample_single_dir"
  Dir.chdir("sample_single_dir") do
    sh "rake"
  end
end

desc "Compile a sample of exitting case if assertion fails."
task        :sample_exit_at_fail => [:anchor_root, :fruit_f90] do
  puts      "sample_exit_at_fail"
  Dir.chdir("sample_exit_at_fail") do
    sh "rake"
  end
end


desc "Compile a sample which complies only specifiled testers."
task   :sample_selective => [:anchor_root, :fruit_f90] do
  puts "sample_selective"
  Dir.chdir("sample_selective") do
    sh "rake"
  end
end


desc "Complie a sample of tester for external subroutine"
task   :sample_external_sub => [:anchor_root, :fruit_f90] do
  puts "sample_external_sub"
  Dir.chdir("sample_external_sub") do
    sh "rake"
  end
end

desc "A sample for external subroutines having circular dependency"
task   :sample_circular_dep => [:anchor_root, :fruit_f90] do
  puts "sample_circular_dep"
  Dir.chdir("sample_circular_dep") do
    sh "rake"
  end
end


desc "Complie a sample of tester for external function"
task   :sample_external_func => [:anchor_root, :fruit_f90] do
  puts "sample_external_func"
  Dir.chdir("sample_external_func") do
    sh "rake"
  end
end

desc "Compile usual program (not unit test) using rake_estimate.rb"
task   :sample_selective_main do
  puts "sample_selective_main"
  Dir.chdir("sample_selective") do
    sh "rake -f rakefile_main"
  end
end

desc "Compile a sample whose build directry is a subdirectry"
task   :sample_build_dir => [:anchor_root, :fruit_f90] do
  puts "sample_build_dir"
  Dir.chdir("sample_build_dir") do
    sh "rake"
  end
end

desc "Compile a sample of multi-directry test."
task   :sample_multi_dir => [:anchor_root, :fruit_f90] do
  puts "sample_multi_dir"
  [
    "sample_multi_dir/build",
    "sample_multi_dir/build_selective",
  ].each{|dir|
    Dir.chdir(dir) do
      sh "rake"
    end
  }
end


desc "coverage (only for gfortran)"
task   :coverage => [:anchor_root, :fruit_f90] do
  puts "coverage"
  if $gcov or $prof_genx
    [
      "sample_selective",
      "sample_build_dir",
      "sample_multi_dir/build",
      "sample_multi_dir/build_selective",
    ].each{|dir|
      Dir.chdir(dir) do
        sh "rake coverage"
      end
    }
  end
end

if $mpiexec_exist
  desc   "self_test_mpi"
  task   :self_test_mpi  do
    puts "self_test_mpi"
    Dir.chdir("self_test_mpi") do
      sh "rake"
    end
  end

  desc   "sample_mpi"
  task   :sample_mpi  do
    puts "sample_mpi"
    Dir.chdir("sample_mpi") do
      sh "rake"
    end
  end
end


load 'rake_base_deps.rb'
include RakeBaseDeps
